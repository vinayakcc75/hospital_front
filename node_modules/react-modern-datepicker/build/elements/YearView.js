"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));

var _isBetween = _interopRequireDefault(require("dayjs/plugin/isBetween"));

var _isSameOrAfter = _interopRequireDefault(require("dayjs/plugin/isSameOrAfter"));

var _isSameOrBefore = _interopRequireDefault(require("dayjs/plugin/isSameOrBefore"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Wrapper = _interopRequireDefault(require("./Wrapper"));

var _Span = _interopRequireDefault(require("./Span"));

var _Header = _interopRequireDefault(require("./Header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  background-color:", ";\n  color : ", ";\n  margin: 5px 15px; \n  \n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  margin: 5px 15px; \n  pointer-events : ", ";\n  cursor : ", ";\n  background-color:", ";\n  color:", ";\n  opacity:", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

_dayjs["default"].extend(_customParseFormat["default"]);

_dayjs["default"].extend(_isBetween["default"]);

_dayjs["default"].extend(_isSameOrAfter["default"]);

_dayjs["default"].extend(_isSameOrBefore["default"]);

var YSpan = (0, _styledComponents["default"])(_Span["default"])(_templateObject(), function (props) {
  return props.isMax || props.isMin ? 'none' : 'auto';
}, function (props) {
  return props.isMax || props.isMin ? 'default' : 'pointer';
}, function (props) {
  return props.isMax || props.isMin ? '#eee' : props.secondaryColor;
}, function (props) {
  return props.primaryTextColor;
}, function (props) {
  return props.isMax || props.isMin ? '0.4' : '1';
});
var SelectedSpan = (0, _styledComponents["default"])(_Span["default"])(_templateObject2(), function (props) {
  return props.primaryColor;
}, function (props) {
  return props.isMax || props.isMin ? props.primaryTextColor : props.secondaryTextColor;
});

var getYears = function getYears(year, main, end, start) {
  var startYear = year;
  var endYear = year + 15;
  var years = [];

  for (var i = startYear; i <= endYear; i++) {
    years.push({
      y: i,
      isMax: end ? main.year(i).isAfter(end) : false,
      isMin: start ? main.year(i).isBefore(start) : false
    });
  }

  return years;
};

var YearView = function YearView(props) {
  var date = props.date,
      format = props.format,
      onYearChange = props.onYearChange,
      yearBlock = props.yearBlock,
      maxDate = props.maxDate,
      minDate = props.minDate,
      primaryColor = props.primaryColor,
      secondaryColor = props.secondaryColor,
      primaryTextColor = props.primaryTextColor,
      secondaryTextColor = props.secondaryTextColor;

  var _date = (0, _dayjs["default"])(date || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

  var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

  var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

  var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
  var mainDate = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY') : defaultDate;
  var endDate = maxDate ? (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY') : null;
  var startDate = minDate ? (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY') : null;
  var currentYear = mainDate.get('year');
  var years = getYears(yearBlock, mainDate, endDate, startDate);
  return _react["default"].createElement(_Wrapper["default"], null, _react["default"].createElement(_Header["default"], null, years.map(function (year, k) {
    return currentYear === year.y ? _react["default"].createElement(SelectedSpan, {
      isMax: year.isMax,
      isMin: year.isMin,
      key: k,
      onClick: function onClick() {
        return !year.isMax && !year.isMin && onYearChange(year.y);
      },
      primaryColor: primaryColor,
      primaryTextColor: primaryTextColor,
      secondaryTextColor: secondaryTextColor
    }, year.y) : _react["default"].createElement(YSpan, {
      isMax: year.isMax,
      isMin: year.isMin,
      key: k,
      onClick: function onClick() {
        return !year.isMax && !year.isMin && onYearChange(year.y);
      },
      primaryTextColor: primaryTextColor,
      secondaryColor: secondaryColor,
      secondaryTextColor: secondaryTextColor
    }, year.y);
  })));
};

YearView.propTypes = {
  date: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  format: _propTypes["default"].string,
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  onYearChange: _propTypes["default"].func,
  primaryColor: _propTypes["default"].string,
  primaryTextColor: _propTypes["default"].string,
  secondaryColor: _propTypes["default"].string,
  secondaryTextColor: _propTypes["default"].string,
  yearBlock: _propTypes["default"].number
};
var _default = YearView;
exports["default"] = _default;