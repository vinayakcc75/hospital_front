"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));

var _isBetween = _interopRequireDefault(require("dayjs/plugin/isBetween"));

var _isSameOrAfter = _interopRequireDefault(require("dayjs/plugin/isSameOrAfter"));

var _isSameOrBefore = _interopRequireDefault(require("dayjs/plugin/isSameOrBefore"));

var _Wrapper = _interopRequireDefault(require("./Wrapper"));

var _Span = _interopRequireDefault(require("./Span"));

var _Header = _interopRequireDefault(require("./Header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  width:100%;\n  text-align : left;\n  height:30px;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  color: #b8c2cb;\n  font-weight: 600;\n  margin: 0;\n  color:", ";\n  opacity:0.4;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  background-color:", ";\n  color : ", ";\n  height:30px;\n  line-height: 30px; \n  margin: 0;\n  opacity:", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  height:30px;\n  line-height: 30px; \n  margin: 0; \n  pointer-events : ", ";\n  cursor : ", ";\n  background-color:", ";\n  color:", ";\n  opacity:", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

_dayjs["default"].extend(_customParseFormat["default"]);

_dayjs["default"].extend(_isBetween["default"]);

_dayjs["default"].extend(_isSameOrAfter["default"]);

_dayjs["default"].extend(_isSameOrBefore["default"]);

var DSpan = (0, _styledComponents["default"])(_Span["default"])(_templateObject(), function (props) {
  return props.isMax || props.isMin ? 'none' : 'auto';
}, function (props) {
  return props.isMax || props.isMin ? 'default' : 'pointer';
}, function (props) {
  return props.isMax || props.isMin ? "#eee" : props.secondaryColor;
}, function (props) {
  return props.primaryTextColor;
}, function (props) {
  return props.isMax || props.isMin ? '0.4' : '1';
});
var SelectedSpan = (0, _styledComponents["default"])(_Span["default"])(_templateObject2(), function (props) {
  return props.primaryColor;
}, function (props) {
  return props.isMax || props.isMin ? props.primaryTextColor : props.secondaryTextColor;
}, function (props) {
  return props.isMax || props.isMin ? '0.4' : '1';
});
var HeadSpan = (0, _styledComponents["default"])(_Span["default"])(_templateObject3(), function (props) {
  return props.primaryTextColor;
});

var Body = _styledComponents["default"].div(_templateObject4());

var DateView = function DateView(props) {
  var date = props.date,
      format = props.format,
      onDateChange = props.onDateChange,
      maxDate = props.maxDate,
      minDate = props.minDate,
      primaryColor = props.primaryColor,
      secondaryColor = props.secondaryColor,
      primaryTextColor = props.primaryTextColor,
      secondaryTextColor = props.secondaryTextColor;

  var _date = (0, _dayjs["default"])(date || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

  var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

  var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

  var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
  var mainDate = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY') : defaultDate;
  var endDate = maxDate ? (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY') : null;
  var startDate = minDate ? (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY') : null;
  var currentDate = mainDate.get('date');
  var days = mainDate.daysInMonth(5);
  var daysToAdd = Number(mainDate.startOf('month').format('d'));
  var daysArray = [];

  for (var i = 1; i <= days; i++) {
    daysArray[i - 1] = {
      d: i,
      isMax: endDate ? mainDate.startOf('day').date(i).isAfter(endDate) : false,
      isMin: startDate ? mainDate.startOf('day').date(i).isBefore(startDate) : false
    };
  }

  var extraDaysArray = [];

  for (var _i = 0; _i < daysToAdd; _i++) {
    extraDaysArray[_i] = 0;
  }

  var totalDays = extraDaysArray.concat(daysArray);
  var d = [];
  var chunk = 7;

  for (var _i2 = 0, j = totalDays.length; _i2 < j; _i2 += chunk) {
    d.push(totalDays.slice(_i2, _i2 + chunk));
  }

  return _react["default"].createElement(_Wrapper["default"], null, _react["default"].createElement(_Header["default"], null, _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "S"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "M"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "T"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "W"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "T"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "F"), _react["default"].createElement(HeadSpan, {
    primaryTextColor: primaryTextColor
  }, "S")), d.map(function (week, k) {
    return _react["default"].createElement(Body, {
      key: k
    }, week.map(function (day, i) {
      return currentDate === day.d && !d.isMax ? _react["default"].createElement(SelectedSpan, {
        isMax: day.isMax,
        isMin: day.isMin,
        key: i,
        onClick: function onClick() {
          return !d.isMax && !day.isMin && onDateChange(day.d);
        },
        primaryColor: primaryColor,
        primaryTextColor: primaryTextColor,
        secondaryTextColor: secondaryTextColor
      }, day ? day.d : '') : _react["default"].createElement(DSpan, {
        isMax: day.isMax,
        isMin: day.isMin,
        key: i,
        onClick: function onClick() {
          return !d.isMax && !day.isMin && onDateChange(day.d);
        },
        primaryColor: primaryColor,
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor
      }, day ? day.d : '');
    }));
  }));
};

DateView.propTypes = {
  date: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  format: _propTypes["default"].string,
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  onDateChange: _propTypes["default"].func,
  primaryColor: _propTypes["default"].string,
  primaryTextColor: _propTypes["default"].string,
  secondaryColor: _propTypes["default"].string,
  secondaryTextColor: _propTypes["default"].string
};
var _default = DateView;
exports["default"] = _default;