"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));

var _isBetween = _interopRequireDefault(require("dayjs/plugin/isBetween"));

var _isSameOrAfter = _interopRequireDefault(require("dayjs/plugin/isSameOrAfter"));

var _isSameOrBefore = _interopRequireDefault(require("dayjs/plugin/isSameOrBefore"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  min-width: 170px;\n  background: ", ";\n  text-align: center;\n  border-radius: 6px;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  color:", ";\n  opacity:1;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  font-size: 1.5em;\n  text-align: center;\n  color:", ";\n  font-size: 20px;\n  font-weight: 600;\n  margin-right: 10px;\n  line-height: 64px;\n  cursor: pointer;\n  opacity:0.4;\n\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

_dayjs["default"].extend(_customParseFormat["default"]);

_dayjs["default"].extend(_isBetween["default"]);

_dayjs["default"].extend(_isSameOrAfter["default"]);

_dayjs["default"].extend(_isSameOrBefore["default"]);

var Span = _styledComponents["default"].span(_templateObject(), function (props) {
  return props.primaryTextColor;
});

var SelectedSpan = (0, _styledComponents["default"])(Span)(_templateObject2(), function (props) {
  return props.primaryTextColor;
});

var Wrapper = _styledComponents["default"].div(_templateObject3(), function (props) {
  return props.secondaryColor;
});

var DateEditor = function DateEditor(props) {
  var onDateClick = props.onDateClick,
      onMonthClick = props.onMonthClick,
      onYearClick = props.onYearClick,
      date = props.date,
      format = props.format,
      viewFor = props.viewFor,
      maxDate = props.maxDate,
      minDate = props.minDate,
      lang = props.lang,
      primaryTextColor = props.primaryTextColor;

  var _date = (0, _dayjs["default"])(date || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

  var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

  var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

  var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
  var day = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').format('DD') : defaultDate.format('DD');
  var month = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').format('MMM') : defaultDate.format('MMM');
  var year = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').format('YYYY') : defaultDate.format('YYYY');
  return _react["default"].createElement(Wrapper, null, viewFor === 'date' ? _react["default"].createElement(SelectedSpan, {
    onClick: onDateClick,
    primaryTextColor: primaryTextColor
  }, day) : _react["default"].createElement(Span, {
    onClick: onDateClick,
    primaryTextColor: primaryTextColor
  }, day), viewFor === 'month' ? _react["default"].createElement(SelectedSpan, {
    onClick: onMonthClick,
    primaryTextColor: primaryTextColor
  }, month) : _react["default"].createElement(Span, {
    onClick: onMonthClick,
    primaryTextColor: primaryTextColor
  }, month), viewFor === 'year' ? _react["default"].createElement(SelectedSpan, {
    onClick: onYearClick,
    primaryTextColor: primaryTextColor
  }, year) : _react["default"].createElement(Span, {
    onClick: onYearClick,
    primaryTextColor: primaryTextColor
  }, year));
};

DateEditor.propTypes = {
  date: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  format: _propTypes["default"].string,
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  onDateClick: _propTypes["default"].func,
  onMonthClick: _propTypes["default"].func,
  onYearClick: _propTypes["default"].func,
  primaryTextColor: _propTypes["default"].string,
  secondaryColor: _propTypes["default"].string,
  viewFor: _propTypes["default"].string
};
var _default = DateEditor;
exports["default"] = _default;