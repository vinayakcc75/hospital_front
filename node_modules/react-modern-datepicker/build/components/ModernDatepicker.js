"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));

var _isBetween = _interopRequireDefault(require("dayjs/plugin/isBetween"));

var _isSameOrAfter = _interopRequireDefault(require("dayjs/plugin/isSameOrAfter"));

var _isSameOrBefore = _interopRequireDefault(require("dayjs/plugin/isSameOrBefore"));

var _Label = _interopRequireDefault(require("../elements/Label"));

var _Input = _interopRequireDefault(require("../elements/Input"));

var _Icon = _interopRequireDefault(require("../elements/Icon"));

var _Container = _interopRequireDefault(require("../elements/Container"));

var _CalendarContainer = _interopRequireDefault(require("../elements/CalendarContainer"));

var _CalendarHeading = _interopRequireDefault(require("../elements/CalendarHeading"));

var _SingleArrow = _interopRequireDefault(require("../elements/SingleArrow"));

var _DoubleArrow = _interopRequireDefault(require("../elements/DoubleArrow"));

var _DateEditor = _interopRequireDefault(require("../elements/DateEditor"));

var _CalendarBody = _interopRequireDefault(require("../elements/CalendarBody"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

_dayjs["default"].extend(_customParseFormat["default"]);

_dayjs["default"].extend(_isBetween["default"]);

_dayjs["default"].extend(_isSameOrAfter["default"]);

_dayjs["default"].extend(_isSameOrBefore["default"]);

var ModernDatepicker =
/*#__PURE__*/
function (_Component) {
  _inherits(ModernDatepicker, _Component);

  function ModernDatepicker(props) {
    var _this;

    _classCallCheck(this, ModernDatepicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModernDatepicker).call(this, props));
    _this.state = {
      showContainer: false,
      setViewFor: 'date',
      yearBlock: (0, _dayjs["default"])().get('year') - 8,
      dateToEdit: props.date ? (0, _dayjs["default"])(props.date, props.format || 'DD-MM-YYYY').format(props.format || 'DD-MM-YYYY') : '',
      isValid: props.date ? (0, _dayjs["default"])(props.date, props.format || 'DD-MM-YYYY').isValid() : true,
      isMaxValid: props.maxDate ? (0, _dayjs["default"])(props.maxDate, props.format || 'DD-MM-YYYY').isValid() : true,
      isMinValid: props.minDate ? (0, _dayjs["default"])(props.minDate, props.format || 'DD-MM-YYYY').isValid() : true
    };
    _this.handleDateChange = _this.handleDateChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ModernDatepicker, [{
    key: "handleDateChange",
    value: function handleDateChange(value, unit) {
      var _this$props = this.props,
          format = _this$props.format,
          onChange = _this$props.onChange,
          maxDate = _this$props.maxDate,
          minDate = _this$props.minDate;
      var yearBlock = this.state.yearBlock;

      var _date = (0, _dayjs["default"])(this.state.dateToEdit || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

      var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

      var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

      var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
      var date = (0, _dayjs["default"])(this.state.dateToEdit || defaultDate.format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY').set(unit, value);
      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var dateToEdit = date.format(format || 'DD-MM-YYYY');
      this.setState({
        dateToEdit: dateToEdit,
        yearBlock: newYearBlock
      });
      onChange(dateToEdit);

      if (unit === 'date') {
        this.toggleCalendar(false);
      }
    }
  }, {
    key: "addDate",
    value: function addDate(value, unit) {
      var _this$props2 = this.props,
          format = _this$props2.format,
          onChange = _this$props2.onChange,
          maxDate = _this$props2.maxDate,
          minDate = _this$props2.minDate;
      var _this$state = this.state,
          yearBlock = _this$state.yearBlock,
          dateToEdit = _this$state.dateToEdit;
      var firstDateToBeSet = false,
          lastDateToBeSet = false;

      var _date = (0, _dayjs["default"])(this.state.dateToEdit || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

      var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

      var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

      var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
      var date = (0, _dayjs["default"])(dateToEdit || defaultDate, format || 'DD-MM-YYYY').clone().add(value, unit);
      var endDate = maxDate ? (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY') : null;
      var startDate = minDate ? (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY') : null;

      if (maxDate && date.isAfter(endDate) || minDate && date.isBefore(startDate)) {
        if (maxDate && date.isAfter(endDate) && (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY').get('year') === date.get('year') && (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY').get('month') === date.get('month')) {
          firstDateToBeSet = true;
        } else if (minDate && date.isBefore(startDate) && (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY').get('year') === date.get('year') && (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY').get('month') === date.get('month')) {
          lastDateToBeSet = true;
        } else {
          return;
        }
      }

      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var newDateToEdit = date.format(format || 'DD-MM-YYYY');

      if (firstDateToBeSet) {
        newDateToEdit = date.startOf('month').format(format || 'DD-MM-YYYY');
      } else if (lastDateToBeSet) {
        newDateToEdit = date.endOf('month').format(format || 'DD-MM-YYYY');
      } else {
        newDateToEdit = date.format(format || 'DD-MM-YYYY');
      }

      this.setState({
        dateToEdit: newDateToEdit,
        yearBlock: newYearBlock
      });
      onChange(newDateToEdit);
    }
  }, {
    key: "subDate",
    value: function subDate(value, unit) {
      var _this$props3 = this.props,
          format = _this$props3.format,
          onChange = _this$props3.onChange,
          maxDate = _this$props3.maxDate,
          minDate = _this$props3.minDate;
      var _this$state2 = this.state,
          yearBlock = _this$state2.yearBlock,
          dateToEdit = _this$state2.dateToEdit;
      var firstDateToBeSet = false,
          lastDateToBeSet = false;

      var _date = (0, _dayjs["default"])(this.state.dateToEdit || (0, _dayjs["default"])().format(format || 'DD-MM-YYYY'), format || 'DD-MM-YYYY');

      var _minDate = (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY');

      var _maxDate = (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY');

      var defaultDate = _date.isBetween(minDate ? _minDate.clone().subtract(1, 'day') : _date.clone().subtract(1, 'day'), maxDate ? _maxDate.clone().add(1, 'day') : _date.clone().add(1, 'day')) ? _date : maxDate && _maxDate.isSameOrAfter(_date) ? _date : minDate && _minDate.isSameOrBefore(_date) ? _minDate : maxDate ? _maxDate.clone().subtract(1, 'day') : minDate ? _minDate.clone().add(1, 'day') : _date;
      var date = (0, _dayjs["default"])(dateToEdit || defaultDate, format || 'DD-MM-YYYY').clone().subtract(value, unit);
      var endDate = maxDate ? (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY') : null;
      var startDate = minDate ? (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY') : null;

      if (maxDate && date.isAfter(endDate) || minDate && date.isBefore(startDate)) {
        if (maxDate && date.isAfter(endDate) && (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY').get('year') === date.get('year') && (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY').get('month') === date.get('month')) {
          firstDateToBeSet = true;
        } else if (minDate && date.isBefore(startDate) && (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY').get('year') === date.get('year') && (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY').get('month') === date.get('month')) {
          lastDateToBeSet = true;
        } else {
          return;
        }
      }

      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var newDateToEdit = date.format(format || 'DD-MM-YYYY');

      if (firstDateToBeSet) {
        newDateToEdit = date.startOf('month').format(format || 'DD-MM-YYYY');
      } else if (lastDateToBeSet) {
        newDateToEdit = date.endOf('month').format(format || 'DD-MM-YYYY');
      } else {
        newDateToEdit = date.format(format || 'DD-MM-YYYY');
      }

      this.setState({
        dateToEdit: newDateToEdit,
        yearBlock: newYearBlock
      });
      onChange(newDateToEdit);
    }
  }, {
    key: "getNewYearBlock",
    value: function getNewYearBlock(yearBlock, value) {
      var newYearBlock;
      var year = value;

      if (year < yearBlock) {
        newYearBlock = year - 15;
      } else if (year > yearBlock + 15) {
        newYearBlock = year;
      } else {
        newYearBlock = yearBlock;
      }

      return newYearBlock;
    }
  }, {
    key: "onBlur",
    value: function onBlur(e) {
      var _this2 = this;

      var currentTarget = e.currentTarget;
      setTimeout(function () {
        if (!currentTarget.contains(document.activeElement)) {
          _this2.toggleCalendar(false);
        }
      }, 0);
    }
  }, {
    key: "toggleCalendar",
    value: function toggleCalendar(bool, e) {
      var _this$props4 = this.props,
          date = _this$props4.date,
          format = _this$props4.format,
          onFocus = _this$props4.onFocus,
          onBlur = _this$props4.onBlur;

      if (bool && onFocus) {
        onFocus(e);
      } else if (!bool && onBlur) {
        onBlur();
      }

      this.setState({
        showContainer: bool,
        setViewFor: bool ? 'date' : this.state.setViewFor,
        dateToEdit: bool ? date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').format(format || 'DD-MM-YYYY') : '' : this.state.dateToEdit,
        isValid: date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').isValid() : this.state.isValid
      });
    }
  }, {
    key: "openViewFor",
    value: function openViewFor(setViewFor) {
      this.setState({
        setViewFor: setViewFor
      });
    }
  }, {
    key: "checkAndReturnDate",
    value: function checkAndReturnDate() {
      var _this$state3 = this.state,
          isValid = _this$state3.isValid,
          isMaxValid = _this$state3.isMaxValid,
          isMinValid = _this$state3.isMinValid;
      var _this$props5 = this.props,
          format = _this$props5.format,
          date = _this$props5.date,
          maxDate = _this$props5.maxDate,
          minDate = _this$props5.minDate,
          lang = _this$props5.lang;
      var currentDate = date ? (0, _dayjs["default"])(date, format || 'DD-MM-YYYY') : '';
      var startDate = minDate ? (0, _dayjs["default"])(minDate, format || 'DD-MM-YYYY') : null;
      var endDate = maxDate ? (0, _dayjs["default"])(maxDate, format || 'DD-MM-YYYY') : null;

      if (!isValid || !isMaxValid || !isMinValid) {
        return 'Invalid date';
      } else if (startDate && endDate && !endDate.startOf('day').isAfter(startDate)) {
        return 'Invalid max/min date';
      } else if (currentDate && startDate && !startDate.startOf('day').isSameOrBefore(currentDate)) {
        return 'Invalid min date';
      } else if (currentDate && endDate && !endDate.startOf('day').isSameOrAfter(currentDate)) {
        return 'Invalid max date';
      } else if (date) {
        return (0, _dayjs["default"])(date, format || 'DD-MM-YYYY').format(format || 'DD-MM-YYYY');
      } else {
        return '';
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$state4 = this.state,
          showContainer = _this$state4.showContainer,
          setViewFor = _this$state4.setViewFor,
          dateToEdit = _this$state4.dateToEdit,
          isValid = _this$state4.isValid,
          yearBlock = _this$state4.yearBlock;
      var _this$props6 = this.props,
          format = _this$props6.format,
          placeholder = _this$props6.placeholder,
          showBorder = _this$props6.showBorder,
          className = _this$props6.className,
          id = _this$props6.id,
          icon = _this$props6.icon,
          iconClass = _this$props6.iconClass,
          maxDate = _this$props6.maxDate,
          minDate = _this$props6.minDate,
          label = _this$props6.label,
          labelClass = _this$props6.labelClass,
          lang = _this$props6.lang,
          _this$props6$primaryC = _this$props6.primaryColor,
          primaryColor = _this$props6$primaryC === void 0 ? '#00b9f5' : _this$props6$primaryC,
          _this$props6$secondar = _this$props6.secondaryColor,
          secondaryColor = _this$props6$secondar === void 0 ? 'white' : _this$props6$secondar,
          _this$props6$primaryT = _this$props6.primaryTextColor,
          primaryTextColor = _this$props6$primaryT === void 0 ? 'black' : _this$props6$primaryT,
          _this$props6$secondar2 = _this$props6.secondaryTextColor,
          secondaryTextColor = _this$props6$secondar2 === void 0 ? 'white' : _this$props6$secondar2;
      return _react["default"].createElement(_Container["default"], {
        onBlur: function onBlur(e) {
          return _this3.onBlur(e);
        }
      }, label && _react["default"].createElement(_Label["default"], {
        className: labelClass,
        htmlFor: id
      }, label), _react["default"].createElement(_Input["default"], {
        className: className,
        id: id,
        onChange: function onChange(e) {
          return e.preventDefault();
        },
        onFocus: function onFocus(e) {
          return _this3.toggleCalendar(true, e);
        },
        placeholder: placeholder,
        showBorder: showBorder,
        type: "text",
        value: this.checkAndReturnDate()
      }), icon && _react["default"].createElement(_Icon["default"], {
        className: iconClass,
        icon: icon,
        onClick: function onClick() {
          return _this3.toggleCalendar(true);
        }
      }), showContainer && isValid && (this.checkAndReturnDate() === '' || (0, _dayjs["default"])(this.checkAndReturnDate(), format || 'DD-MM-YYYY').isValid()) && _react["default"].createElement(_CalendarContainer["default"], {
        secondaryColor: secondaryColor
      }, _react["default"].createElement(_CalendarHeading["default"], {
        secondaryColor: secondaryColor
      }, _react["default"].createElement(_SingleArrow["default"], {
        left: true,
        onClick: function onClick() {
          return _this3.subDate(1, 'month');
        },
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor
      }), _react["default"].createElement(_DoubleArrow["default"], {
        left: true,
        onClick: function onClick() {
          return _this3.subDate(1, 'year');
        },
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor
      }), _react["default"].createElement(_DateEditor["default"], {
        date: dateToEdit,
        format: format,
        lang: lang,
        maxDate: maxDate,
        minDate: minDate,
        onDateClick: function onDateClick() {
          return _this3.openViewFor('date');
        },
        onMonthClick: function onMonthClick() {
          return _this3.openViewFor('month');
        },
        onYearClick: function onYearClick() {
          return _this3.openViewFor('year');
        },
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor,
        viewFor: setViewFor
      }), _react["default"].createElement(_SingleArrow["default"], {
        onClick: function onClick() {
          return _this3.addDate(1, 'month');
        },
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor
      }), _react["default"].createElement(_DoubleArrow["default"], {
        onClick: function onClick() {
          return _this3.addDate(1, 'year');
        },
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor
      })), _react["default"].createElement(_CalendarBody["default"], {
        date: dateToEdit,
        format: format,
        maxDate: maxDate,
        minDate: minDate,
        onChange: function onChange(value, unit) {
          return _this3.handleDateChange(value, unit);
        },
        primaryColor: primaryColor,
        primaryTextColor: primaryTextColor,
        secondaryColor: secondaryColor,
        secondaryTextColor: secondaryTextColor,
        viewFor: setViewFor,
        yearBlock: yearBlock
      })));
    }
  }]);

  return ModernDatepicker;
}(_react.Component);

ModernDatepicker.propTypes = {
  className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  date: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  format: _propTypes["default"].string,
  iconClass: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  id: _propTypes["default"].string,
  label: _propTypes["default"].string,
  labelClass: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  lang: _propTypes["default"].string,
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  onBlur: _propTypes["default"].func,
  onChange: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  primaryColor: _propTypes["default"].string,
  primaryTextColor: _propTypes["default"].string,
  secondaryColor: _propTypes["default"].string,
  secondaryTextColor: _propTypes["default"].string,
  showBorder: _propTypes["default"].bool
};
var _default = ModernDatepicker;
exports["default"] = _default;